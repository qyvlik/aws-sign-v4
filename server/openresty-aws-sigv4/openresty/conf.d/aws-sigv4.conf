
server {
    listen       3001;

    # 默认读取 body
    lua_need_request_body on;
    # 单个 location 允许读取 ngx.req.read_body()

    # Authorization: algorithm Credential=access key ID/credential scope, SignedHeaders=SignedHeaders, Signature=signature

    location / {
        content_by_lua_block {


            function pairsByKeys (t, f)
              local a = {}
              for n in pairs(t) do table.insert(a, n) end
              table.sort(a, f)
              local i = 0      -- iterator variable
              local iter = function ()   -- iterator function
                i = i + 1
                if a[i] == nil then return nil
                else return a[i], t[a[i]]
                end
              end
              return iter
            end

            function trim(s)
               return (s:gsub("^%s*(.-)%s*$", "%1"))
            end

            function string:split(pat)
              local st, g = 1, self:gmatch("()("..pat..")")
              local function getter(self, segs, seps, sep, cap1, ...)
                st = sep and seps + #sep
                return self:sub(segs, (seps or 0) - 1), cap1 or sep, ...
              end
              local function splitter(self)
                if st then return getter(self, st, g()) end
              end
              return splitter, self
            end

            function string.starts(String,Start)
               return string.sub(String,1,string.len(Start))==Start
            end

            function string.ends(String,End)
               return End == '' or string.sub(String,-string.len(End))==End
            end

            local authorization = ngx.req.get_headers()["authorization"];
            local algorithm_end_index = string.find(authorization, ' ', 1);
            local algorithm = string.sub(authorization, 1, algorithm_end_index-1);
            local other_part = string.sub(authorization, algorithm_end_index+1, -1);

            local credential = '';
            local access_key_id = '';
            local scope = '';
            local signed_headers_str = '';
            local signed_headers = {};
            local signature = '';

            for val in string.split(other_part, ', ') do
                if string.starts(val, 'Credential=') then
                    credential = string.gsub(val, 'Credential=', '', 1);
                end
                if string.starts(val, 'SignedHeaders=') then
                   signed_headers_str = string.gsub(val, 'SignedHeaders=', '', 1);
                   for signed_header in string.split(signed_headers_str, ';') do
                      signed_headers[string.lower(signed_header)] = true;
                   end
                end
                if string.starts(val, 'Signature=') then
                    signature = string.gsub(val, 'Signature=', '', 1);
                end
            end

            local canonical_headers = {};
            for key, val in pairsByKeys(ngx.req.get_headers()) do
                if signed_headers[key] then
                    local header = string.lower(key) .. ':' .. trim(val);
                    table.insert(canonical_headers, header);
                end
            end

            local canonical_headers_string = table.concat(canonical_headers, '\n') .. '\n';

            local method = ngx.req.get_method();
            local canonical_uri = ngx.var.uri;

            local canonical_query = {};
            local args = ngx.req.get_uri_args();
            for key, val in pairsByKeys(args) do
                local param = ngx.escape_uri(key) .. '=' .. ngx.escape_uri(val);
                table.insert(canonical_query, param);
            end
            local canonical_query_string = table.concat(canonical_query, '&');

            local payload = ngx.req.get_body_data();

            ngx.say('method ', method);
            ngx.say('canonical_uri ', canonical_uri);
            ngx.say('canonical_query_string ', canonical_query_string);
            ngx.say('canonical_headers_string ', canonical_headers_string);
            ngx.say('algorithm ', algorithm);
            ngx.say('credential ', credential);
            ngx.say('signature ', signature);
        }
    }
}