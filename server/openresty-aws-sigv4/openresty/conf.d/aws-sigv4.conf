
server {
    listen       3001;

    # 默认读取 body
    lua_need_request_body on;
    # 单个 location 允许读取 ngx.req.read_body()

    # Authorization: algorithm Credential=access key ID/credential scope, SignedHeaders=SignedHeaders, Signature=signature

    location / {
        content_by_lua_block {


            function pairsByKeys (t, f)
              local a = {}
              for n in pairs(t) do table.insert(a, n) end
              table.sort(a, f)
              local i = 0      -- iterator variable
              local iter = function ()   -- iterator function
                i = i + 1
                if a[i] == nil then return nil
                else return a[i], t[a[i]]
                end
              end
              return iter
            end

            function trim(s)
               return (s:gsub("^%s*(.-)%s*$", "%1"))
            end


            local CanonicalHeaders = {};
            local headers = ngx.req.get_headers()
            for key, val in pairsByKeys(headers) do
                local header = string.lower(key) .. ':' .. trim(val);
                table.insert(CanonicalHeaders, header);
            end

            local CanonicalHeadersString = table.concat(CanonicalHeaders, '&');

            local HTTPRequestMethod = ngx.req.get_method();
            -- local CanonicalURI = ngx.var.request_uri;
            local CanonicalURI = ngx.var.uri;
            local args = ngx.req.get_uri_args();

            local CanonicalQuery = {};
            for key, val in pairsByKeys(args) do
                local param = ngx.escape_uri(key) .. '=' .. ngx.escape_uri(val);
                table.insert(CanonicalQuery, param);
            end

            local CanonicalQueryString = table.concat(CanonicalQuery, '\n');

            local CanonicalHeaders = nil;
            local payload = ngx.req.get_body_data();
            ngx.say("HTTPRequestMethod ", HTTPRequestMethod);
            ngx.say("CanonicalURI ", CanonicalURI);
            ngx.say("CanonicalQueryString ", CanonicalQueryString);
            ngx.say("CanonicalHeadersString ", CanonicalHeadersString);
        }
    }
}